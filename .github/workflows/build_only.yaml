name: build only
env:
  FETCH_DEPTH: 1
on: workflow_dispatch

jobs:
  dist:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
            # to_test: true
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
            package-name: win32-arm64-msvc
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
            # to_test: true
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
            package-name: linux-arm64-gnu
          - os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
            package-name: linux-arm-gnueabihf
          - os: macos-12
            target: x86_64-apple-darwin
            code-target: darwin-x64
            to_test: true
          - os: macos-12
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: dist (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
     
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
         python-version: '3.11.9'       

      - uses: actions/setup-python@v4 
        with:
          python-version: 'pypy3.10'          

      - name: Cache asyncflows package
        id: cache-pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-asyncflows-${{ matrix.os }}-pip
          restore-keys: |
            ${{ matrix.os }}-pip-

      - name: Install asyncflows(Macos)
        if: matrix.to_test == true && matrix.os == 'macos-12'
        run: |
         python -m venv .venv
         source .venv/bin/activate
         pip install asyncflows
         deactivate
        working-directory: editors/code

      - name: Install asyncflows(Windows)
        if: matrix.to_test && matrix.os == 'windows-latest'
        run: |
         python -m venv .venv
         .venv\Scripts\activate.ps1
         pip install asyncflows
        working-directory: editors/code

      - name: Install toolchain dependencies
        if: matrix.container == 'rockylinux:8'
        shell: bash
        run: |
          dnf install -y gcc

      - name: Update apt repositories
        if: contains(matrix.os, 'ubuntu')
        run: sudo apt-get update

      - name: Install AArch64 target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM target toolchain
        if: matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get install gcc-arm-linux-gnueabihf
        

      - name: Npm install
        run: npm install
        working-directory: editors/code

      - name: Fetch correct Nodejs bindings(Linux)
        if: ${{ contains(matrix.code-target, 'linux') && matrix.package-name }} 
        run: sh ./scripts/update-nm.sh ${{ matrix.package-name }}
        working-directory: editors/code

      - name: Fetch correct Nodejs bindings(Windows)
        if: ${{ contains(matrix.code-target, 'win32') && matrix.package-name }} 
        run: ./scripts/update-nm.ps1 ${{ matrix.package-name }}
        working-directory: editors/code

      - name: Build extension
        run: npm run compile3
        working-directory: editors/code

      - if: contains(matrix.code-target, 'linux')
        run: sh ./scripts/update-paths.sh && mkdir ../../dist
        working-directory: editors/code

      - if: contains(matrix.target, 'darwin')
        run: sh ./scripts/update-paths-darwin.sh && mkdir ../../dist
        working-directory: editors/code

      - if: contains(matrix.code-target, 'win32')
        shell: pwsh
        run: ./scripts/update-paths-win32.ps1 && md ../../dist -ea 0
        working-directory: editors/code


      - name: Package extension
        if: matrix.code-target
        run: npx vsce package -o ../../dist/asyncflows-lsp-${{ matrix.code-target }}.vsix --target ${{ matrix.code-target }}
        working-directory: editors/code


      - name: Asyncflows package test(Linux)
        if: matrix.to_test == true && matrix.os == 'ubuntu-20.04'
        run: |
          source .venv/bin/activate
          python -c "import asyncflows" 
          deactivate
        working-directory: editors/code

      - name: Asyncflows package test(Windows)
        if: matrix.to_test && matrix.os == 'windows-latest'
        run: |
          .venv\Scripts\python.exe -c "import asyncflows" 
        working-directory: editors/code

      # - name: Start Xvfb(Linux)
      #   if: contains(matrix.code-target, 'linux')
      #   working-directory: editors/code
      #   run: |
      #    /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      #    echo ">>> Started xvfb"

      - name: Test extension(Macos)
        if: matrix.to_test && matrix.os == 'macos-12'
        run: |
          npm run compile-tests
          npm run test-extension
        working-directory: editors/code

      - name: Test extension(Windows)
        if: contains(matrix.os, 'windows') && matrix.to_test  
        run: |
          npm run compile-tests
          npm run test-extension
        working-directory: editors/code

      - name: Check logs
        if: always() && matrix.to_test && matrix.os == 'macos-12'
        run: |
          sh ./scripts/print-logs.sh
        working-directory: editors/code

      - name: Check logs(Windows)
        if: always() && matrix.to_test && matrix.os == 'windows-latest'
        run: |
          ./scripts/print-logs.ps1
        working-directory: editors/code

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-asyncflows-lsp-${{ matrix.code-target }}
          path: ./dist
